-----------------------------------------------------------------------------
Data JPA Integration Tests
-----------------------------------------------------------------------------
@RunWith(SpringRunner.class): provides a bridge between Spring Boot test
                              features and JUnit

@DataJpaTest: provides some standard setup for testing the persistence layer:
                - configuring H2
                - setting Hibernate, Spring Data, and the DataSource
                - performing an @EntityScan
                - turning on SQL logging
@DataJpaTest loads the application context and then starts the app.
There are two ways, the test can find the application context:
 - use @ContextConfiguration on the test class
 - place the test in the same folder structure as the spring boot app class
   (auto detect)

-----------------------------------------------------------------------------
Web Mvc Integration Tests
-----------------------------------------------------------------------------
@WebMvcTest Can be used when a test focuses only on Spring MVC components.
- creates a (partial) application context
- disables full auto-configuration
- only configures relevant to MVC tests (i.e. @Controller, @ControllerAdvice,
  @JsonComponent, Converter/GenericConverter, Filter, WebMvcConfigurer
  and HandlerMethodArgumentResolver beans
- does NOT configure @Component, @Service or @Repository beans

@WebMvcTest
- is used along with @MockBean to provide mock implementations for required
  dependencies.
- auto-configures MockMvc which offers a powerful way of easy testing
  MVC controllers without starting a full HTTP server.

MockMvc: testing MVC controllers without starting a full HTTP server

-----------------------------------------------------------------------------
SpringBootTest Integration Tests
-----------------------------------------------------------------------------
@SpringBootTest
- starts up the entire container
- creating the ApplicationContext